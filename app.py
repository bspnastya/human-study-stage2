from __future__ import annotations
from streamlit_autorefresh import st_autorefresh
import random, time, datetime, secrets, threading, queue, re, itertools, json, sys, math
from typing import List, Dict
import streamlit as st, streamlit.components.v1 as components
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from pathlib import Path


st.set_page_config(page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                   page_icon="üéØ", layout="centered",
                   initial_sidebar_state="collapsed")

MOBILE_QS_FLAG = "mobile"
BASE_URL       = "https://storage.yandexcloud.net/test3123234442"
TIME_LIMIT     = 15
TARGET_SHOWS   = 21                  

GROUPS = ["img1_dif_corners","img2_dif_corners",
          "img3_same_corners_no_symb","img4_same_corners",
          "img5_same_corners"]

ALGS_LET = ["pca_rgb_result","socolov_lab_result",
            "socolov_rgb_result","umap_rgb_result"]
ALGS_COR = ["socolov_lab_result","socolov_rgb_result"]

CORNER = {"img1_dif_corners":"–Ω–µ—Ç","img2_dif_corners":"–Ω–µ—Ç",
          "img3_same_corners_no_symb":"–¥–∞","img4_same_corners":"–¥–∞",
          "img5_same_corners":"–¥–∞"}

LETTER = {"img1_dif_corners":"–∂","img2_dif_corners":"—Ñ—è",
          "img3_same_corners_no_symb":"–ù–µ –≤–∏–∂—É","img4_same_corners":"–∞–±",
          "img5_same_corners":"—é—ç—ã"}

LETTER_GROUPS_WITH_CHARS = ["img1_dif_corners","img2_dif_corners",
                            "img4_same_corners","img5_same_corners"]
NO_CHAR_GROUP = "img3_same_corners_no_symb"


if "initialized" not in st.session_state:
    st.session_state.update(initialized=True,questions=[],idx=0,name="",
                            phase="intro",phase_start_time=None,
                            pause_until=0,_timer_flags={},
                            session_id=secrets.token_hex(8))

components.html("""
<script>
(function(){{
  const flag='{flag}',isMobile=window.innerWidth<1024;
  if(isMobile)document.documentElement.classList.add('mobile-client');
  const qs=new URLSearchParams(window.location.search);
  if(isMobile&&!qs.has(flag)){{qs.set(flag,'1');window.location.search=qs.toString();}}
}})();
</script>""".format(flag=MOBILE_QS_FLAG),height=0)

q=st.query_params if hasattr(st,"query_params") else st.experimental_get_query_params()
if q.get(MOBILE_QS_FLAG)==["1"]:
    st.markdown("""
    <style>
      body{background:#808080;color:#fff;text-align:center;display:flex;align-items:center;justify-content:center;height:100vh;margin:0;}
      h2{margin:0 auto;line-height:1.4;font-size:1.3rem;font-weight:500;}
    </style>
    <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫<br>–î–∞–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å <strong>–ü–ö –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–∞</strong>.</h2>
    """,unsafe_allow_html=True)
    st.stop()


st.markdown("""
<style>
html,body,.stApp,[data-testid="stAppViewContainer"],.main,.block-container{
background:#808080!important;color:#111!important;}
h1,h2,h3,h4,h5,h6,p,label,li,span{color:#111!important;}
header[data-testid="stHeader"]{display:none;}
.stButton>button{min-height:52px;padding:0 20px;border:1px solid #555;
background:#222;color:#ddd;border-radius:8px;}
input[data-testid="stTextInput"]{height:52px;padding:0 16px;font-size:1.05rem;}
</style>""",unsafe_allow_html=True)
st.markdown("""
<style>
html,body,.stApp,[data-testid="stAppViewContainer"],.main,.block-container{background:#808080!important;color:#111!important;}
body{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;}
h1,h2,h3,h4,h5,h6{color:#111!important;}
header[data-testid="stHeader"]{display:none;}
.stButton>button{min-height:52px!important;padding:0 20px!important;border:1px solid #555!important;background:#222!important;color:#ddd!important;border-radius:8px;}
input[data-testid="stTextInput"]{height:52px!important;padding:0 16px!important;font-size:1.05rem;}
#mobile-overlay{position:fixed;inset:0;z-index:2147483647;display:none;align-items:center;justify-content:center;color:#fff;font:500 1.2rem/1.5 sans-serif;text-align:center;padding:0 20px;background:#808080;}
@media(max-width:1023px){#mobile-overlay{display:flex;}.block-container>.element-container:nth-child(n+2){display:none!important;}html,body{overflow:hidden!important;height:100%!important;}}
.stApp>div{-webkit-backface-visibility:hidden;backface-visibility:hidden;transition:opacity .1s ease-in-out;}
</style>
<div id="mobile-overlay">–£–≤–∞–∂–∞–µ–º—ã–π&nbsp;—É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–∞–Ω–Ω–æ–µ&nbsp;–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å&nbsp;–ü–ö –∏–ª–∏&nbsp;–Ω–æ—É—Ç–±—É–∫–∞.</div>
""",unsafe_allow_html=True)

def open_book():
    scopes=["https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive"]
    creds=ServiceAccountCredentials.from_json_keyfile_dict(
                dict(st.secrets["gsp"]), scopes)
    return gspread.authorize(creds).open("human_study_results")
BOOK    = open_book()
LOG_WS  = BOOK.worksheet("stage2_log")
STAT_WS = BOOK.worksheet("stage2_stats")

def read_counters()->dict[tuple[str,str],int]:
    return {(r["image_id"],r["alg"]):int(r["shows"])
            for r in STAT_WS.get_all_records()}

def bump_counter(img:str,alg:str):
    rows=STAT_WS.get_all_values()
    for i,row in enumerate(rows[1:],start=2):
        if row[0]==img and row[1]==alg:
            STAT_WS.update_cell(i,3,int(row[2] or 0)+1); return
    STAT_WS.append_row([img,alg,1],value_input_option="RAW")


Q = globals().setdefault("_Q", queue.Queue(maxsize=1000))
if not globals().get("_WRITER"):
    def writer():
        buf=[]
        while True:
            try: buf.append(Q.get(timeout=1))
            except queue.Empty: pass
            if buf:
                try: LOG_WS.append_rows(buf,value_input_option="RAW"); buf.clear()
                except: buf.clear()
    threading.Thread(target=writer,daemon=True).start()
    globals()["_WRITER"]=True


if "letters_plan" not in st.session_state:
    algs = random.sample(ALGS_LET,len(ALGS_LET))
    st.session_state.letters_plan = {g:algs[i]
        for i,g in enumerate(LETTER_GROUPS_WITH_CHARS)}
    st.session_state.letters_plan[NO_CHAR_GROUP] = random.choice(ALGS_LET)

def url(g:str,a:str)->str: return f"{BASE_URL}/{g}_{a}.png"
def clean(s:str)->set[str]: return set(re.sub("[ ,.;:-]+","", (s or "").lower()))


def make_qs()->List[Dict]:
    cnt=read_counters()
    qs=[]

    for g in GROUPS:
        alg = st.session_state.letters_plan[g]
        if cnt.get((g,alg),0) < TARGET_SHOWS:
            qs.append({"group":g,"alg":alg,"img":url(g,alg),
                       "qtype":"letters",
                       "prompt":"–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –±—É–∫–≤—ã, —Ç–æ —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ.",
                       "correct":LETTER[g]})

    for g,alg in itertools.product(GROUPS,ALGS_COR):
        if cnt.get((g,alg),0) < TARGET_SHOWS:
            qs.append({"group":g,"alg":alg,"img":url(g,alg),
                       "qtype":"corners",
                       "prompt":"–°—á–∏—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª –∏ –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –æ—Ç—Ç–µ–Ω–∫–∞?",
                       "correct":CORNER[g]})
    random.shuffle(qs)
    for i,q in enumerate(qs,1): q["‚Ññ"]=i
    return qs

if not st.session_state.questions:
    st.session_state.questions = make_qs()

def render_timer(sec:int,tid:str):
    if tid in st.session_state.get("_timer_flags", {}):
        return
    components.html(f"""
    <div style="font-size:1.2rem;font-weight:bold;color:#111;margin-bottom:10px;margin-left:-8px;">
      –û—Å—Ç–∞–ª–æ—Å—å&nbsp;–≤—Ä–µ–º–µ–Ω–∏: <span id="t{tid}">{sec}</span>&nbsp;—Å–µ–∫
    </div>
    <script>
      (function(){{
        let t={sec};
        const span=document.getElementById('t{tid}');
        const iv=setInterval(()=>{{if(--t<0){{clearInterval(iv);return;}}if(span)span.textContent=t;}},1000);
      }})();
    </script>""",height=50)
    if "_timer_flags" not in st.session_state:
        st.session_state._timer_flags = {}
    st.session_state._timer_flags[tid]=True


if not st.session_state.name:
    st.markdown("""
    <div style="color:#111;">
      <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.</h2>
      <p><b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</b><br>
      –í —Ö–æ–¥–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ. –í—Å–µ–≥–æ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <b>15</b> –≤–æ–ø—Ä–æ—Å–æ–≤. –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.</p>
      <p><b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç —Å–ø–æ–∫–æ–π–Ω–æ: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ—Ü–µ–Ω–∫—É –∏—Å–ø—ã—Ç—É–µ–º—ã—Ö. –û—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ä–∞–∑–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.</b></p>
      <p><b>–ß—Ç–æ —ç—Ç–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</b><br>
      –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤. –ù–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ¬´—ç—Ç–∞–ª–æ–Ω–æ–º¬ª. –¶–µ–ª—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ‚Äî –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p>
      <p><b>–í–∞–∂–Ω–æ</b><br>
      –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–µ–Ω. –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç <b>—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–µ</b>.</p>
      <p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º¬ª.</p>
    </div>""",unsafe_allow_html=True)
    nm = st.text_input("",placeholder="–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º",
                       key="username",label_visibility="collapsed")
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º"):
        st.session_state.name=f"–£—á–∞—Å—Ç–Ω–∏–∫_{secrets.randbelow(900000)+100000}"
        st.experimental_rerun()
    if nm:
        st.session_state.name=nm.strip(); st.experimental_rerun()
    st.stop()


if st.session_state.idx >= len(st.session_state.questions):
    st.markdown("""
    <div style='margin-top:50px;padding:40px;text-align:center;font-size:2rem;
    color:#fff;background:#262626;border-radius:12px;'>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ.<br><b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!</b></div>
    """,unsafe_allow_html=True)
    st.balloons(); st.stop()


q = st.session_state.questions[st.session_state.idx]

if st.session_state.phase=="intro":
    txt_c="""–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –¥–∏–∞–º–µ—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —É–≥–ª—ã,
<b>–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π</b>, –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ–∫—Ä–∞—à–µ–Ω—ã –ª–∏ –æ–Ω–∏ –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –æ—Ç—Ç–µ–Ω–∫–∞.<br><br>
–ö–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ <b>15&nbsp;—Å–µ–∫—É–Ω–¥</b>. –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ."""
    txt_l="""–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ
<b>–±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</b>.<br><br>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ; –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
–ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏ —Ç.&nbsp;–¥.<br><br>–ï—Å–ª–∏ –±—É–∫–≤ –Ω–µ—Ç ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ù–µ –≤–∏–∂—É –±—É–∫–≤¬ª</b>."""
    st.markdown(f"<div style='font-size:1.1rem;line-height:1.6;margin-bottom:30px;'>"
                f"{txt_c if q['qtype']=='corners' else txt_l}</div>",unsafe_allow_html=True)
    if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É",key=f"start{st.session_state.idx}"):
        st.session_state.update(phase="question",
                                phase_start_time=time.time())
        st.experimental_rerun()
    st.stop()


remain = TIME_LIMIT - (time.time()-st.session_state.phase_start_time)
if remain<0: remain=0
st.markdown(f"### –í–æ–ø—Ä–æ—Å ‚Ññ{q['‚Ññ']} –∏–∑ {len(st.session_state.questions)}")
render_timer(math.ceil(remaining),f"{idx}")

ph = st.empty()
if remain>0: ph.image(q["img"],width=300)
else:
    ph.markdown("<div style='color:#666;font-style:italic;padding:40px 0;"
                "text-align:left;'>–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.</div>",
                unsafe_allow_html=True)

st.markdown("---")

def finish(ans:str):
    ms = int((time.time()-st.session_state.phase_start_time)*1000)
    ok = clean(ans)==clean(q["correct"]) if q["qtype"]=="letters" else \
         ans.lower()==q["correct"].lower()
    Q.put([datetime.datetime.utcnow().isoformat(),st.session_state.name,
           q["‚Ññ"],q["group"],q["alg"],q["qtype"],q["prompt"],
           ans,q["correct"],ms,ok,st.session_state.session_id])
    bump_counter(q["group"],q["alg"])
    st.session_state.update(idx=st.session_state.idx+1,phase="intro",
                            phase_start_time=None,_timer_flags={},
                            pause_until=time.time()+0.4)
    st.experimental_rerun()

if q["qtype"]=="corners":
    sel = st.radio(q["prompt"],
                   ["–î–∞, —É–≥–ª—ã –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.","–ù–µ—Ç, —É–≥–ª—ã –æ–∫—Ä–∞—à–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞.",
                    "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å."],
                   index=None,key=f"r{st.session_state.idx}")
    if sel:
        finish("–¥–∞" if sel.startswith("–î–∞") else
               "–Ω–µ—Ç" if sel.startswith("–ù–µ—Ç") else "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å")
else:
    txt = st.text_input(q["prompt"],key=f"t{st.session_state.idx}",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—ã –∏ Enter")
    col,_ = st.columns([1,3])
    with col:
        if st.button("–ù–µ –≤–∏–∂—É –±—É–∫–≤",key=f"none{st.session_state.idx}",
                     disabled=bool(re.search(r"[–ê-–Ø–∞-—è–Å—ë]",txt or ""))):
            finish("–ù–µ –≤–∏–∂—É")
    if txt and re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë ,.;:-]+",txt):
        finish(txt.strip())


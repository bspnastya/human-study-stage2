from __future__ import annotations
from streamlit_autorefresh import st_autorefresh
import random, time, datetime, secrets, threading, queue, re, itertools, sys, math
from typing import List, Dict
import streamlit as st, streamlit.components.v1 as components
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from pathlib import Path

st.set_page_config(page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", page_icon="üéØ", layout="centered", initial_sidebar_state="collapsed")

MOBILE_QS_FLAG = "mobile"; BASE_URL = "https://storage.yandexcloud.net/test3123234442"; TIME_LIMIT = 15; TARGET_SHOWS = 21
GROUPS = ["img1_dif_corners","img2_dif_corners","img3_same_corners_no_symb","img4_same_corners","img5_same_corners"]
ALGS_LET = ["pca_rgb_result","socolov_lab_result","socolov_rgb_result","umap_rgb_result"]
ALGS_COR = ["socolov_lab_result","socolov_rgb_result"]
CORNER = {"img1_dif_corners":"–Ω–µ—Ç","img2_dif_corners":"–Ω–µ—Ç","img3_same_corners_no_symb":"–¥–∞","img4_same_corners":"–¥–∞","img5_same_corners":"–¥–∞"}
LETTER = {"img1_dif_corners":"–∂","img2_dif_corners":"—Ñ—è","img3_same_corners_no_symb":"–ù–µ –≤–∏–∂—É","img4_same_corners":"–∞–±","img5_same_corners":"—é—ç—ã"}
WITH_CHARS = ["img1_dif_corners","img2_dif_corners","img4_same_corners","img5_same_corners"]; NO_CHAR = "img3_same_corners_no_symb"

if "initialized" not in st.session_state:
    st.session_state.update(initialized=True, questions=[], idx=0, name="", phase="intro", phase_start_time=None, pause_until=0, _timer_flags={}, session_id=secrets.token_hex(8))

components.html(f"""<script>(function(){{const f='{MOBILE_QS_FLAG}',m=innerWidth<1024;if(m)document.documentElement.classList.add('mobile-client');const qs=new URLSearchParams(location.search);if(m&&!qs.has(f)){{qs.set(f,'1');location.search=qs.toString();}}}})();</script>""", height=0)

if st.experimental_get_query_params().get(MOBILE_QS_FLAG) == ["1"]:
    st.markdown("""<style>body{background:#808080;color:#fff;display:flex;align-items:center;justify-content:center;height:100vh;margin:0;}h2{font-size:1.3rem;font-weight:500;line-height:1.4;}</style><h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫<br>–î–∞–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å <strong>–ü–ö –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–∞</strong>.</h2>""", unsafe_allow_html=True); st.stop()

st.markdown("""<style>html,body,.stApp,[data-testid="stAppViewContainer"],.main,.block-container{background:#808080!important;color:#111!important;}h1,h2,h3,h4,h5,h6,p,label,li,span{color:#111!important;}header[data-testid="stHeader"]{display:none;}.stButton>button{min-height:52px!important;padding:0 20px!important;border:1px solid #555!important;background:#222!important;color:#fff!important;border-radius:8px!important;}.stButton>button:hover{background:#333!important;color:#fff!important;}.stButton>button:focus{background:#333!important;color:#fff!important;box-shadow:none!important;}.stButton>button:disabled{background:#444!important;color:#888!important;cursor:not-allowed!important;opacity:0.6!important;}.stButton>button>div,.stButton>button>div>p{color:inherit!important;}input[data-testid="stTextInput"]{height:52px;padding:0 16px;font-size:1.05rem;}</style>""", unsafe_allow_html=True)

@st.cache_resource
def open_book():
    scopes = ["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(dict(st.secrets["gsp"]), scopes)
    return gspread.authorize(creds).open("human_study_results")

@st.cache_resource
def get_worksheets():
    book = open_book()
    try: log_ws = book.worksheet("stage2_log")
    except:
        log_ws = book.add_worksheet("stage2_log", rows=1000, cols=20)
        log_ws.append_row(["timestamp","user","qnum","group","alg","qtype","prompt","answer","correct","time_ms","is_correct","session_id"])
    try: stat_ws = book.worksheet("stage2_stats")
    except:
        stat_ws = book.add_worksheet("stage2_stats", rows=100, cols=3)
        stat_ws.append_row(["image_id","alg","shows"])
    return log_ws, stat_ws
LOG_WS, STAT_WS = get_worksheets()

@st.cache_data(ttl=10)
def read_counters():
    records = STAT_WS.get_all_records()
    return {(r["image_id"], r["alg"]): int(r.get("shows", 0)) for r in records}

def bump_counter(img, alg):
    rows = STAT_WS.get_all_values()
    for i, row in enumerate(rows[1:], start=2):
        if len(row) >= 3 and row[0] == img and row[1] == alg:
            STAT_WS.update_cell(i, 3, int(row[2] or 0) + 1); return
    STAT_WS.append_row([img, alg, 1], value_input_option="RAW")

Q = globals().setdefault("_Q", queue.Queue(maxsize=1000))
if not globals().get("_W"):
    def w():
        buf = []
        while True:
            try:
                buf.append(Q.get(timeout=1))
                if len(buf) >= 5: LOG_WS.append_rows(buf, value_input_option="RAW"); buf.clear()
            except queue.Empty:
                if buf: LOG_WS.append_rows(buf, value_input_option="RAW"); buf.clear()
    threading.Thread(target=w, daemon=True).start(); globals()["_W"] = True

if "letters_plan" not in st.session_state:
    order = random.sample(ALGS_LET, len(ALGS_LET))
    st.session_state.letters_plan = {g: order[i] for i, g in enumerate(WITH_CHARS)}
    st.session_state.letters_plan[NO_CHAR] = random.choice(ALGS_LET)

def url(g, a): return f"{BASE_URL}/{g}_{a}.png"
def clean(s): return set(re.sub("[ ,.;:-]+", "", (s or "").lower()))

def make_qs() -> List[Dict]:
    cnt = read_counters(); qs = []
    for g in GROUPS:
        alg = st.session_state.letters_plan[g]
        if cnt.get((g, alg), 0) < TARGET_SHOWS:
            qs.append({"group": g, "alg": alg, "img": url(g, alg), "qtype": "letters", "prompt": "–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –±—É–∫–≤—ã, —Ç–æ —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ.", "correct": LETTER[g]})
    for g, alg in itertools.product(GROUPS, ALGS_COR):
        if cnt.get((g, alg), 0) < TARGET_SHOWS:
            qs.append({"group": g, "alg": alg, "img": url(g, alg), "qtype": "corners", "prompt": "–°—á–∏—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª –∏ –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –æ—Ç—Ç–µ–Ω–∫–∞?", "correct": CORNER[g]})
    random.shuffle(qs)
    for i, q in enumerate(qs, 1): q["‚Ññ"] = i
    return qs
if not st.session_state.questions: st.session_state.questions = make_qs()

def render_timer(sec: int, tid: str):
    if tid in st.session_state._timer_flags: return
    components.html(f"""<div style="font-size:1.2rem;font-weight:bold;color:#111;margin-bottom:10px;margin-left:-8px;">–û—Å—Ç–∞–ª–æ—Å—å&nbsp;–≤—Ä–µ–º–µ–Ω–∏: <span id="t{tid}">{sec}</span>&nbsp;—Å–µ–∫</div><script>(function(){{let t={sec};const s=document.getElementById('t{tid}');const i=setInterval(()=>{{if(--t<0){{clearInterval(i);return;}}if(s)s.textContent=t;}},1000);}})();</script>""", height=50)
    st.session_state._timer_flags[tid] = True

if not st.session_state.name:
    st.markdown("""<div style="color:#111;"><h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.</h2><p><b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</b><br>–í —Ö–æ–¥–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ. –í—Å–µ–≥–æ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <b>15</b> –≤–æ–ø—Ä–æ—Å–æ–≤. –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.</p><p><b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç —Å–ø–æ–∫–æ–π–Ω–æ: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ—Ü–µ–Ω–∫—É –∏—Å–ø—ã—Ç—É–µ–º—ã—Ö. –û—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ä–∞–∑–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.</b></p><p><b>–ß—Ç–æ —ç—Ç–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</b><br>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤. –ù–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ¬´—ç—Ç–∞–ª–æ–Ω–æ–º¬ª. –¶–µ–ª—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ‚Äî –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p><p><b>–í–∞–∂–Ω–æ</b><br>–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–µ–Ω. –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç <b>—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–µ</b>.</p><p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º¬ª.</p></div>""", unsafe_allow_html=True)
    n = st.text_input("", placeholder="–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º", key="username", label_visibility="collapsed")
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º"):
        st.session_state.name = f"–£—á–∞—Å—Ç–Ω–∏–∫_{secrets.randbelow(900000)+100000}"; st.experimental_rerun()
    if n: st.session_state.name = n.strip(); st.experimental_rerun()
    st.stop()

if st.session_state.idx >= len(st.session_state.questions):
    st.markdown("<div style='margin-top:50px;padding:40px;text-align:center;font-size:2rem;color:#fff;background:#262626;border-radius:12px;'>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ.<br><b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!</b></div>", unsafe_allow_html=True); st.balloons(); st.stop()

q = st.session_state.questions[st.session_state.idx]

if st.session_state.phase == "intro":
    txt_c = """–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –¥–∏–∞–º–µ—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —É–≥–ª—ã,<b>–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π</b>, –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ–∫—Ä–∞—à–µ–Ω—ã –ª–∏ –æ–Ω–∏ –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –æ—Ç—Ç–µ–Ω–∫–∞.<br><br>–ö–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ <b>15&nbsp;—Å–µ–∫—É–Ω–¥</b>. –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ."""
    txt_l = """–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ<b>–±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</b>.<br><br>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏ —Ç.&nbsp;–¥., –∞ —Ç–∞–∫–∂–µ —Å–ª–∏—Ç–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.<br><br>–ï—Å–ª–∏ –±—É–∫–≤ –Ω–µ—Ç ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ù–µ –≤–∏–∂—É –±—É–∫–≤¬ª</b>."""
    st.markdown(f"<div style='font-size:1.1rem;line-height:1.6;margin-bottom:30px;'>{txt_c if q['qtype']=='corners' else txt_l}</div>", unsafe_allow_html=True)
    if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É", key=f"go{st.session_state.idx}"):
        st.session_state.update(phase="question", phase_start_time=time.time()); st.experimental_rerun()
    st.stop()

if st.session_state.phase_start_time is None: st.session_state.phase_start_time = time.time()
remaining = max(0, TIME_LIMIT - (time.time() - st.session_state.phase_start_time))
st.markdown(f"### –í–æ–ø—Ä–æ—Å ‚Ññ{q['‚Ññ']} –∏–∑ {len(st.session_state.questions)}")
render_timer(math.ceil(remaining), str(st.session_state.idx))

if remaining > 0:
    components.html(f"""<div id="img_{st.session_state.idx}" style="text-align:left;margin:5px 0;"><img src="{q['img']}" width="300" style="border:1px solid #444;border-radius:8px;"></div><script>setTimeout(()=>{{const c=document.getElementById('img_{st.session_state.idx}');if(c)c.innerHTML='<div style="font-style:italic;color:#666;padding:20px 0;">–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.</div>'; }}, {TIME_LIMIT*1000});</script>""", height=310)
else:
    st.markdown("<div style='color:#666;font-style:italic;padding:40px 0;text-align:left;'>–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.</div>", unsafe_allow_html=True)

st.markdown("---")

def finish(ans: str):
    ms = int((time.time() - st.session_state.phase_start_time) * 1000)
    ok = clean(ans) == clean(q["correct"]) if q["qtype"] == "letters" else ans.lower() == q["correct"].lower()
    Q.put([datetime.datetime.utcnow().isoformat(), st.session_state.name, q["‚Ññ"], q["group"], q["alg"], q["qtype"], q["prompt"], ans, q["correct"], ms, ok, st.session_state.session_id])
    bump_counter(q["group"], q["alg"])
    st.session_state.update(idx = st.session_state.idx + 1, phase = "intro", phase_start_time = None, _timer_flags = {})
    st.experimental_rerun()

if q["qtype"] == "corners":
    sel = st.radio(q["prompt"], ["–î–∞, —É–≥–ª—ã –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.","–ù–µ—Ç, —É–≥–ª—ã –æ–∫—Ä–∞—à–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞.","–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å."], index=None, key=f"r{st.session_state.idx}")
    if sel: finish("–¥–∞" if sel.startswith("–î–∞") else "–Ω–µ—Ç" if sel.startswith("–ù–µ—Ç") else "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å")
else:
    txt = st.text_input(q["prompt"], key=f"t{st.session_state.idx}", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –Ω–∞–∂–º–∏—Ç–µ Enter")
    st.caption("–ß—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –±—É–∫–≤—ã, –Ω–∞–∂–º–∏—Ç–µ Enter. –ï—Å–ª–∏ –Ω–µ –≤–∏–¥–∏—Ç–µ –±—É–∫–≤, –æ—á–∏—Å—Ç–∏—Ç–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞.")
    col, _ = st.columns([1, 3])
    error_flag = False
    with col:
        has_letters = bool(re.search(r"[–ê-–Ø–∞-—è–Å—ë]", txt))
        btn_clicked = st.button("–ù–µ –≤–∏–∂—É –±—É–∫–≤", key=f"none{st.session_state.idx}", disabled=has_letters)
        if btn_clicked:
            if has_letters:
                error_flag = True
            else:
                finish("–ù–µ –≤–∏–∂—É")
    if error_flag:
        st.markdown("<div style='margin-top:10px;padding:12px 16px;border-radius:8px;background:#f8d7da;color:#111;font-size:1.05rem;font-weight:500;white-space:nowrap;'>–û—á–∏—Å—Ç–∏—Ç–µ&nbsp;–ø–æ–ª–µ&nbsp;–≤–≤–æ–¥–∞,&nbsp;–µ—Å–ª–∏&nbsp;–Ω–µ&nbsp;–≤–∏–¥–∏—Ç–µ&nbsp;–±—É–∫–≤.</div>", unsafe_allow_html=True)
    if not btn_clicked and txt and re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë ,.;:-]+", txt):
        finish(txt.strip())
    elif txt and not re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë ,.;:-]+", txt):
        st.error("–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.")



from __future__ import annotations
from streamlit_autorefresh import st_autorefresh
import streamlit as st, streamlit.components.v1 as components
import gspread, secrets, random, time, datetime, threading, queue, re, itertools, sys, json
from oauth2client.service_account import ServiceAccountCredentials
from pathlib import Path

st.set_page_config(page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", page_icon="üéØ",
                   layout="centered", initial_sidebar_state="collapsed")

MOBILE_QS_FLAG = "mobile"
BASE_URL = "https://storage.yandexcloud.net/test3123234442"
TIME_LIMIT = 15
TARGET_SHOWS = 21

GROUPS = ["img1_dif_corners", "img2_dif_corners", "img3_same_corners_no_symb",
          "img4_same_corners", "img5_same_corners"]
ALGS_LET = ["pca_rgb_result", "socolov_lab_result", "socolov_rgb_result", "umap_rgb_result"]
ALGS_COR = ["socolov_lab_result", "socolov_rgb_result"]

CORNER = {"img1_dif_corners": "–Ω–µ—Ç", "img2_dif_corners": "–Ω–µ—Ç",
          "img3_same_corners_no_symb": "–¥–∞", "img4_same_corners": "–¥–∞",
          "img5_same_corners": "–¥–∞"}
LETTER = {"img1_dif_corners": "–∂", "img2_dif_corners": "—Ñ—è",
          "img3_same_corners_no_symb": "–ù–µ –≤–∏–∂—É", "img4_same_corners": "–∞–±",
          "img5_same_corners": "—é—ç—ã"}

components.html(f"""
<script>
(function(){{
  const f='{MOBILE_QS_FLAG}',m=innerWidth<1024;
  if(m)document.documentElement.classList.add('mobile-client');
  const qs=new URLSearchParams(location.search);
  if(m&&!qs.has(f)){{qs.set(f,'1');location.search=qs.toString();}}
}})();
</script>""", height=0)

if (st.query_params if hasattr(st, "query_params") else st.experimental_get_query_params()).get(MOBILE_QS_FLAG) == ["1"]:
    st.markdown("""
    <style>body{background:#808080;color:#fff;display:flex;align-items:center;justify-content:center;height:100vh;margin:0;}
    h2{font-size:1.3rem;font-weight:500;line-height:1.4;}</style>
    <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫<br>–î–∞–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å <strong>–ü–ö –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–∞</strong>.</h2>""",
    unsafe_allow_html=True)
    st.stop()

st.markdown("""
<style>
html,body,.stApp,[data-testid="stAppViewContainer"],.main,.block-container{background:#808080!important;color:#111!important;}
h1,h2,h3,h4,h5,h6,p,label,li,span{color:#111!important;}
header[data-testid="stHeader"]{display:none;}
.stButton>button{min-height:52px;padding:0 20px;border:1px solid #555;background:#222;color:#ddd;border-radius:8px;}
input[data-testid="stTextInput"]{height:52px;padding:0 16px;font-size:1.05rem;}
</style>""", unsafe_allow_html=True)

if "initialized" not in st.session_state:
    st.session_state.update(initialized=True, questions=[], idx=0, name="",
                            phase="intro", phase_start_time=None,
                            _timer_flags={}, session_id=secrets.token_hex(8))

scopes = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(dict(st.secrets["gsp"]), scopes)
book = gspread.authorize(creds).open("human_study_results")
LOG_WS = book.worksheet("stage2_log")
STAT_WS = book.worksheet("stage2_stats")

def read_counters():
    return {(r["image_id"], r["alg"]): int(r["shows"]) for r in STAT_WS.get_all_records()}

def bump_counter(img, alg):
    rows = STAT_WS.get_all_values()
    for i, row in enumerate(rows[1:], start=2):
        if row[0] == img and row[1] == alg:
            STAT_WS.update_cell(i, 3, int(row[2] or 0) + 1)
            return
    STAT_WS.append_row([img, alg, 1], value_input_option="RAW")

module = sys.modules[__name__]
if not hasattr(module, "_writer_started"):
    module._writer_started = True
    module._log_queue = queue.Queue(maxsize=1000)
    def writer():
        buf = []
        while True:
            try: buf.append(module._log_queue.get(timeout=1))
            except queue.Empty: pass
            if buf:
                try: LOG_WS.append_rows(buf, value_input_option="RAW"); buf.clear()
                except: buf.clear()
    threading.Thread(target=writer, daemon=True).start()

def make_qs():
    cnt = read_counters()
    letters = []
    for g in GROUPS:
        pool = [a for a in ALGS_LET if cnt.get((g, a), 0) < TARGET_SHOWS]
        if pool:
            a = random.choice(pool)
            letters.append({"group": g, "alg": a, "img": f"{BASE_URL}/{g}_{a}.png",
                            "qtype": "letters",
                            "prompt": "–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –±—É–∫–≤—ã, —Ç–æ —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ.",
                            "correct": LETTER[g]})
    corners = [{"group": g, "alg": a, "img": f"{BASE_URL}/{g}_{a}.png",
                "qtype": "corners",
                "prompt": "–°—á–∏—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª –∏ –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –æ—Ç—Ç–µ–Ω–∫–∞?",
                "correct": CORNER[g]}
               for g, a in itertools.product(GROUPS, ALGS_COR)
               if cnt.get((g, a), 0) < TARGET_SHOWS]
    seq = letters + corners
    random.shuffle(seq)
    for i, q in enumerate(seq, 1): q["‚Ññ"] = i
    return seq

if not st.session_state.questions:
    st.session_state.questions = make_qs()

def render_timer(sec, tid):
    if tid in st.session_state["_timer_flags"]: return
    components.html(f"""
    <div style="display:flex;justify-content:center;margin:10px 0 15px 0;">
      <div style="font-size:20px;font-weight:700;">–û—Å—Ç–∞–ª–æ—Å—å&nbsp;<span id="t{tid}">{sec}</span>&nbsp;—Å–µ–∫</div>
    </div>
    <script>
      let t{tid}={sec};
      const s{tid}=document.getElementById('t{tid}');
      const i{tid}=setInterval(()=>{{if(--t{tid}<0){{clearInterval(i{tid});return;}}s{tid}.innerText=t{tid};}},1000);
    </script>""", unsafe_allow_html=True)
    st.session_state["_timer_flags"][tid] = True

def clean(s): return set(re.sub("[ ,.;:-]+", "", s.lower()))

def finish(ans):
    q = st.session_state.questions[st.session_state.idx]
    ms = int((time.time() - st.session_state.phase_start_time) * 1000)
    ok = clean(ans) == clean(q["correct"]) if q["qtype"] == "letters" else ans.lower() == q["correct"].lower()
    module._log_queue.put([datetime.datetime.utcnow().isoformat(), st.session_state.name, q["‚Ññ"],
                           q["group"], q["alg"], q["qtype"], q["prompt"], ans,
                           q["correct"], ms, ok, st.session_state.session_id], block=False)
    bump_counter(q["group"], q["alg"])
    st.session_state.update(idx=st.session_state.idx + 1, phase="intro",
                            phase_start_time=None, _timer_flags={})
    st.experimental_rerun()

if st.session_state.idx >= len(st.session_state.questions):
    st.markdown("<div style='margin-top:50px;padding:40px;text-align:center;font-size:2rem;color:#fff;background:#262626;border-radius:12px;'>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ.<br><b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!</b></div>",
                unsafe_allow_html=True)
    st.balloons()
    st.stop()

if not st.session_state.name:
    st.markdown("""
    <div style="color:#111;">
      <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.</h2>
      <p><b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</b><br>
      –í —Ö–æ–¥–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ. –í—Å–µ–≥–æ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <b>40</b> –≤–æ–ø—Ä–æ—Å–æ–≤. –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.</p>
      <p><b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç —Å–ø–æ–∫–æ–π–Ω–æ: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ—Ü–µ–Ω–∫—É –∏—Å–ø—ã—Ç—É–µ–º—ã—Ö. –û—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ä–∞–∑–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.</b></p>
      <p><b>–ß—Ç–æ —ç—Ç–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</b><br>
      –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤. –ù–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ¬´—ç—Ç–∞–ª–æ–Ω–æ–º¬ª. –¶–µ–ª—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ‚Äî –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p>
      <p><b>–í–∞–∂–Ω–æ</b><br>
      –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–µ–Ω. –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç <b>—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–µ</b>.</p>
      <p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º¬ª.</p>
    </div>""", unsafe_allow_html=True)
    nick = st.text_input("", placeholder="–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º", key="nm", label_visibility="collapsed")
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º"):
        st.session_state.name = f"–£—á–∞—Å—Ç–Ω–∏–∫_{secrets.randbelow(900000)+100000}"; st.experimental_rerun()
    if nick: st.session_state.name = nick.strip(); st.experimental_rerun()
    st.stop()

q = st.session_state.questions[st.session_state.idx]

if st.session_state.phase == "intro":
    st.markdown(q["prompt"], unsafe_allow_html=True)
    if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É"): st.session_state.update(phase="question", phase_start_time=time.time()); st.experimental_rerun()
    st.stop()

remaining = TIME_LIMIT - (time.time() - st.session_state.phase_start_time)
if remaining < 0: remaining = 0

st.markdown(f"### –í–æ–ø—Ä–æ—Å ‚Ññ{q['‚Ññ']} –∏–∑ {len(st.session_state.questions)}")
render_timer(int(remaining), str(st.session_state.idx))

placeholder = st.empty()
if remaining > 0:
    placeholder.image(q["img"], width=300)
else:
    placeholder.markdown("<div style='color:#666;font-style:italic;padding:40px 0;text-align:center;'>–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.</div>",
                         unsafe_allow_html=True)

st.markdown("---")

if q["qtype"] == "corners":
    sel = st.radio("", ["–î–∞, —É–≥–ª—ã –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.", "–ù–µ—Ç, —É–≥–ª—ã –æ–∫—Ä–∞—à–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞.", "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å."],
                   index=None, key=f"r{st.session_state.idx}")
    if sel: finish("–¥–∞" if sel.startswith("–î–∞") else "–Ω–µ—Ç" if sel.startswith("–ù–µ—Ç") else "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å")
else:
    txt = st.text_input(q["prompt"], key=f"t{st.session_state.idx}", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –Ω–∞–∂–º–∏—Ç–µ Enter")
    col, _ = st.columns([1, 3])
    with col:
        btn_dis = bool(re.search(r"[–ê-–Ø–∞-—è–Å—ë]", txt))
        if st.button("–ù–µ –≤–∏–∂—É –±—É–∫–≤", disabled=btn_dis): finish("–ù–µ –≤–∏–∂—É")
    if txt and not btn_dis and re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë ,.;:-]+", txt): finish(txt.strip())
    elif txt and btn_dis: st.info("–ù–∞–∂–º–∏—Ç–µ Enter, –µ—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –±—É–∫–≤—ã.")


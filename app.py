from __future__ import annotations
from streamlit_autorefresh import st_autorefresh
import random, time, datetime, secrets, threading, queue, re, itertools, json, sys
from typing import List, Dict
import streamlit as st, streamlit.components.v1 as components
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from pathlib import Path


st.set_page_config(page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                   page_icon="üéØ", layout="centered",
                   initial_sidebar_state="collapsed")

MOBILE_QS_FLAG = "mobile"
BASE_URL       = "https://storage.yandexcloud.net/test3123234442"
TIME_LIMIT     = 15
TARGET_SHOWS   = 21                            

GROUPS = ["img1_dif_corners", "img2_dif_corners",
          "img3_same_corners_no_symb",
          "img4_same_corners", "img5_same_corners"]

ALGS_LET = ["pca_rgb_result",
            "socolov_lab_result",
            "socolov_rgb_result",
            "umap_rgb_result"]

ALGS_COR = ["socolov_lab_result", "socolov_rgb_result"]

CORNER = {"img1_dif_corners":"–Ω–µ—Ç","img2_dif_corners":"–Ω–µ—Ç",
          "img3_same_corners_no_symb":"–¥–∞","img4_same_corners":"–¥–∞",
          "img5_same_corners":"–¥–∞"}

LETTER = {"img1_dif_corners":"–∂","img2_dif_corners":"—Ñ—è",
          "img3_same_corners_no_symb":"–ù–µ –≤–∏–∂—É",
          "img4_same_corners":"–∞–±","img5_same_corners":"—é—ç—ã"}

LETTER_GROUPS_WITH_CHARS = [
    "img1_dif_corners","img2_dif_corners",
    "img4_same_corners","img5_same_corners"
]
NO_CHAR_GROUP = "img3_same_corners_no_symb"


if "initialized" not in st.session_state:
    st.session_state.update(
        initialized=True, questions=[], idx=0, name="",
        phase="intro", phase_start_time=None, pause_until=0.0,
        _timer_flags={}, session_id=secrets.token_hex(8)
    )


components.html(f"""
<script>
(function() {{
  const f='{MOBILE_QS_FLAG}', m=innerWidth<1024;
  if (m) document.documentElement.classList.add('mobile-client');
  const qs=new URLSearchParams(location.search);
  if (m && !qs.has(f)) {{ qs.set(f,'1'); location.search=qs.toString(); }}
}})();
</script>""", height=0)

if st.experimental_get_query_params().get(MOBILE_QS_FLAG)==["1"]:
    st.markdown("""
    <style>
      body{background:#808080;color:#fff;display:flex;align-items:center;
            justify-content:center;height:100vh;margin:0;}
      h2{font-size:1.3rem;font-weight:500;line-height:1.4;}
    </style>
    <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫<br>–î–∞–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å <strong>–ü–ö –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–∞</strong>.</h2>
    """, unsafe_allow_html=True)
    st.stop()


st.markdown("""
<style>
html,body,.stApp,[data-testid="stAppViewContainer"],.main,.block-container{
    background:#808080!important;color:#111!important;}
h1,h2,h3,h4,h5,h6,p,label,li,span{color:#111!important;}
header[data-testid="stHeader"]{display:none;}
.stButton>button{min-height:52px;padding:0 20px;border:1px solid #555;
    background:#222;color:#ddd;border-radius:8px;}
input[data-testid="stTextInput"]{height:52px;padding:0 16px;font-size:1.05rem;}
</style>
""", unsafe_allow_html=True)


def open_book():
    scopes = ["https://spreadsheets.google.com/feeds",
              "https://www.googleapis.com/auth/drive"]
    creds  = ServiceAccountCredentials.from_json_keyfile_dict(
                dict(st.secrets["gsp"]), scopes)
    return gspread.authorize(creds).open("human_study_results")

BOOK   = open_book()
LOG_WS = BOOK.worksheet("stage2_log")
STAT_WS= BOOK.worksheet("stage2_stats")

def read_counters() -> dict[tuple[str,str], int]:
    return {(r["image_id"], r["alg"]): int(r["shows"])
            for r in STAT_WS.get_all_records()}

def bump_counter(img:str, alg:str):
    data = STAT_WS.get_all_values()
    for i, row in enumerate(data[1:], start=2):
        if row[0]==img and row[1]==alg:
            STAT_WS.update_cell(i,3, int(row[2] or 0)+1)
            return
    STAT_WS.append_row([img, alg, 1], value_input_option="RAW")


GLOBAL_Q = globals().setdefault("_GLOBAL_Q", queue.Queue(maxsize=1000))
if not globals().get("_WRITER"):
    def writer():
        buf=[]
        while True:
            try: buf.append(GLOBAL_Q.get(timeout=1))
            except queue.Empty: pass
            if buf:
                try: LOG_WS.append_rows(buf, value_input_option="RAW"); buf.clear()
                except: buf.clear()
    threading.Thread(target=writer, daemon=True).start()
    globals()["_WRITER"]=True

if "letters_plan" not in st.session_state:
    shuf = random.sample(ALGS_LET, len(ALGS_LET))
    st.session_state.letters_plan = {
        g: shuf[i] for i, g in enumerate(LETTER_GROUPS_WITH_CHARS)
    }
    st.session_state.letters_plan[NO_CHAR_GROUP] = random.choice(ALGS_LET)


def url(g:str, a:str)->str: return f"{BASE_URL}/{g}_{a}.png"
def clean(s:str)->set[str]: return set(re.sub("[ ,.;:-]+", "", (s or "").lower()))


def make_qs() -> List[Dict]:
    cnt   = read_counters()
    seq   = []
    
    for g in GROUPS:
        alg = st.session_state.letters_plan[g]
        if cnt.get((g, alg),0) < TARGET_SHOWS:
            seq.append({"group":g,"alg":alg,"img":url(g,alg),
                        "qtype":"letters",
                        "prompt":"–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –±—É–∫–≤—ã, —Ç–æ —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ.",
                        "correct":LETTER[g]})

    for g, alg in itertools.product(GROUPS, ALGS_COR):
        if cnt.get((g, alg),0) < TARGET_SHOWS:
            seq.append({"group":g,"alg":alg,"img":url(g,alg),
                        "qtype":"corners",
                        "prompt":"–°—á–∏—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª –∏ –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –æ—Ç—Ç–µ–Ω–∫–∞?",
                        "correct":CORNER[g]})
    random.shuffle(seq)
    for i,q in enumerate(seq,1): q["‚Ññ"]=i
    return seq

if not st.session_state.questions:
    st.session_state.questions = make_qs()


def render_timer(sec:int, tid:str):
    if tid in st.session_state._timer_flags: return
    components.html(f"""
    <div style="display:flex;justify-content:flex-start;margin:10px 0 15px 0;">
      <div style="font-size:20px;font-weight:700;">
        –û—Å—Ç–∞–ª–æ—Å—å&nbsp;<span id="t{tid}">{sec}</span>&nbsp;—Å–µ–∫
      </div>
    </div>
    <script>
      let t{tid}={sec};
      const s{tid}=document.getElementById('t{tid}');
      const i{tid}=setInterval(()=>{{if(--t{tid}<0){{clearInterval(i{tid});return;}}
                                     s{tid}.innerText=t{tid};}},1000);
    </script>""", unsafe_allow_html=True)
    st.session_state._timer_flags[tid]=True

if st.session_state.pause_until > time.time():
    st_autorefresh(interval=600, key="pause")
    st.stop()


if not st.session_state.name:
    st.markdown("""
    <div style="color:#111;">
      <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.</h2>
      <p><b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</b><br>
      –í—Å–µ–≥–æ –≤—ã –æ—Ç–≤–µ—Ç–∏—Ç–µ –Ω–∞ <b>40</b> –≤–æ–ø—Ä–æ—Å–æ–≤. –ù–∞ –≤—Å—ë —É–π–¥—ë—Ç 10-15 –º–∏–Ω—É—Ç.</p>
      <p><b>–í–∞–∂–Ω–æ&nbsp;‚Äî —Ç–æ–ª—å–∫–æ –ü–ö/–Ω–æ—É—Ç–±—É–∫, –ø–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å.</b></p>
      <p>–í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª.</p>
    </div>""", unsafe_allow_html=True)
    name = st.text_input("", placeholder="–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º",
                         key="usernm", label_visibility="collapsed")
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"):
        st.session_state.name = f"–£—á–∞—Å—Ç–Ω–∏–∫_{secrets.randbelow(900000)+100000}"
        st.experimental_rerun()
    if name:
        st.session_state.name = name.strip()
        st.experimental_rerun()
    st.stop()


def finish(ans:str):
    q  = st.session_state.questions[st.session_state.idx]
    ms = int((time.time()-st.session_state.phase_start_time)*1000)
    ok = clean(ans)==clean(q["correct"]) if q["qtype"]=="letters" \
         else ans.lower()==q["correct"].lower()
    GLOBAL_Q.put([
        datetime.datetime.utcnow().isoformat(), st.session_state.name,
        q["‚Ññ"], q["group"], q["alg"], q["qtype"], q["prompt"],
        ans, q["correct"], ms, ok, st.session_state.session_id
    ])
    bump_counter(q["group"], q["alg"])
    st.session_state.update(idx=st.session_state.idx+1,
                            phase="intro", phase_start_time=None,
                            _timer_flags={}, pause_until=time.time()+0.4)
    st.experimental_rerun()


if st.session_state.idx >= len(st.session_state.questions):
    st.markdown("""
    <div style='margin-top:50px;padding:40px;text-align:center;font-size:2rem;
                color:#fff;background:#262626;border-radius:12px;'>
      –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ.<br><b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!</b>
    </div>""", unsafe_allow_html=True)
    st.balloons(); st.stop()


cur = st.session_state.questions[st.session_state.idx]

if st.session_state.phase=="intro":
    txt_c = """–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å ‚Äî –æ—Ü–µ–Ω–∏—Ç—å, –æ–¥–∏–Ω–∞–∫–æ–≤—ã –ª–∏ —Ü–≤–µ—Ç–∞
    <b>–ø—Ä–∞–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ</b> –∏ <b>–ª–µ–≤–æ–≥–æ –Ω–∏–∂–Ω–µ–≥–æ</b> —É–≥–ª–æ–≤ ¬´—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ&nbsp;–æ—Ç—Ç–µ–Ω–∫–∞¬ª.
    –ö–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ <b>15 —Å–µ–∫—É–Ω–¥</b>, –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ."""
    txt_l = """–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–∞ –Ω–µ–º
    <b>–±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</b>. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã,
    –∑–∞–ø—è—Ç—ã–µ –∏–ª–∏ —Å–ª–∏—Ç–Ω–æ. –ï—Å–ª–∏ –±—É–∫–≤ –Ω–µ—Ç ‚Äî –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ù–µ –≤–∏–∂—É –±—É–∫–≤¬ª</b>."""
    st.markdown(f"<div style='font-size:1.1rem;line-height:1.6;margin-bottom:30px;'>"
                f"{txt_c if cur['qtype']=='corners' else txt_l}</div>",
                unsafe_allow_html=True)
    if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É"):
        st.session_state.update(phase="question",
                                phase_start_time=time.time())
        st.experimental_rerun()
    st.stop()


remaining = TIME_LIMIT - (time.time()-st.session_state.phase_start_time)
if remaining < 0: remaining = 0

st.markdown(f"### –í–æ–ø—Ä–æ—Å ‚Ññ{cur['‚Ññ']} –∏–∑ {len(st.session_state.questions)}")
render_timer(int(remaining), str(st.session_state.idx))

ph = st.empty()
if remaining>0:
    ph.image(cur["img"], width=300)
else:
    ph.markdown("<div style='color:#666;font-style:italic;padding:40px 0;"
                "text-align:center;'>–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.</div>",
                unsafe_allow_html=True)

st.markdown("---")

if cur["qtype"]=="corners":
    sel = st.radio("", ["–î–∞, —É–≥–ª—ã –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.",
                        "–ù–µ—Ç, —É–≥–ª—ã –æ–∫—Ä–∞—à–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞.",
                        "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å."],
                   index=None, key=f"r{idx}")
    if sel:
        finish("–¥–∞" if sel.startswith("–î–∞") else
               "–Ω–µ—Ç" if sel.startswith("–ù–µ—Ç") else "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å")
else:
    txt = st.text_input(cur["prompt"], key=f"t{idx}",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—ã –∏ Enter")
    btn_dis = bool(re.search(r"[–ê-–Ø–∞-—è–Å—ë]", txt or ""))
    col,_ = st.columns([1,3])
    with col:
        if st.button("–ù–µ –≤–∏–∂—É –±—É–∫–≤", key=f"none{idx}", disabled=btn_dis):
            finish("–ù–µ –≤–∏–∂—É")
    if txt and re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë ,.;:-]+", txt):
        finish(txt.strip())


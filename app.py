from __future__ import annotations
from streamlit_autorefresh import st_autorefresh
import random, time, datetime, secrets, threading, queue, re, itertools, json, sys
from typing import List, Dict
import streamlit as st, gspread, streamlit.components.v1 as components
from oauth2client.service_account import ServiceAccountCredentials
from pathlib import Path

st.set_page_config(page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                   page_icon="üéØ", layout="centered",
                   initial_sidebar_state="collapsed")

MOBILE_QS_FLAG="mobile"
BASE_URL       ="https://storage.yandexcloud.net/test3123234442"
TIME_LIMIT     =15
TARGET_SHOWS   =21

GROUPS   =["img1_dif_corners","img2_dif_corners","img3_same_corners_no_symb",
           "img4_same_corners","img5_same_corners"]
ALGS_LET =["pca_rgb_result","socolov_lab_result","socolov_rgb_result","umap_rgb_result"]
ALGS_COR =["socolov_lab_result","socolov_rgb_result"]
CORNER   ={"img1_dif_corners":"–Ω–µ—Ç","img2_dif_corners":"–Ω–µ—Ç","img3_same_corners_no_symb":"–¥–∞",
           "img4_same_corners":"–¥–∞","img5_same_corners":"–¥–∞"}
LETTER   ={"img1_dif_corners":"–∂","img2_dif_corners":"—Ñ—è","img3_same_corners_no_symb":"–ù–µ –≤–∏–∂—É",
           "img4_same_corners":"–∞–±","img5_same_corners":"—é—ç—ã"}

if "initialized" not in st.session_state:
    st.session_state.update(initialized=True,questions=[],idx=0,name="",
                            phase="intro",phase_start_time=None,pause_until=0,
                            _timer_flags={},session_id=secrets.token_hex(8))

components.html(f"""
<script>
(function(){{
  const f='{MOBILE_QS_FLAG}',m=innerWidth<1024;
  if(m)document.documentElement.classList.add('mobile-client');
  const qs=new URLSearchParams(location.search);
  if(m&&!qs.has(f)){{qs.set(f,'1');location.search=qs.toString();}}
}})();
</script>""",height=0)

if (st.query_params if hasattr(st,"query_params") else st.experimental_get_query_params()
    ).get(MOBILE_QS_FLAG)==["1"]:
    st.markdown("""<style>body{background:#808080;color:#fff;
    display:flex;align-items:center;justify-content:center;height:100vh;margin:0;}
    h2{font-size:1.3rem;font-weight:500;line-height:1.4;}</style>
    <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫<br>–î–∞–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å <strong>–ü–ö –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–∞</strong>.</h2>""",
    unsafe_allow_html=True)
    st.stop()

st.markdown("""
<style>
html,body,.stApp,[data-testid="stAppViewContainer"],.main,.block-container{background:#808080!important;color:#111!important;}
h1,h2,h3,h4,h5,h6,p,label,li,span{color:#111!important;}
header[data-testid="stHeader"]{display:none;}
.stButton>button{min-height:52px;padding:0 20px;border:1px solid #555;background:#222;color:#ddd;border-radius:8px;}
input[data-testid="stTextInput"]{height:52px;padding:0 16px;font-size:1.05rem;}
</style>""",unsafe_allow_html=True)

def open_book():
    scopes=["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"]
    creds=ServiceAccountCredentials.from_json_keyfile_dict(dict(st.secrets["gsp"]),scopes)
    return gspread.authorize(creds).open("human_study_results")
BOOK=open_book()
LOG_WS  =BOOK.worksheet("stage2_log")
STAT_WS =BOOK.worksheet("stage2_stats")

def read_counters():
    rec=STAT_WS.get_all_records()
    return {(r["image_id"],r["alg"]):int(r["shows"]) for r in rec}

def bump_counter(img,alg):
    vals=STAT_WS.get_all_values()
    for i,row in enumerate(vals[1:],start=2):
        if row[0]==img and row[1]==alg:
            STAT_WS.update_cell(i,3,int(row[2] or 0)+1); return
    STAT_WS.append_row([img,alg,1],value_input_option="RAW")

Path("backup_results").mkdir(exist_ok=True)
if "_GLOBAL_QUEUE" not in globals():
    globals()["_GLOBAL_QUEUE"]=queue.Queue(maxsize=1000)
    def writer():
        buf=[]
        while True:
            try: buf.append(globals()["_GLOBAL_QUEUE"].get(timeout=1))
            except queue.Empty: pass
            if buf:
                try: LOG_WS.append_rows(buf,value_input_option="RAW"); buf.clear()
                except:
                    for r in buf:
                        Path("backup_results",f"{int(time.time()*1e6)}.json"
                            ).write_text(json.dumps(r,ensure_ascii=False))
                    buf.clear()
    threading.Thread(target=writer,daemon=True).start()
log_q=globals()["_GLOBAL_QUEUE"]

def url(g,a):return f"{BASE_URL}/{g}_{a}.png"
def clean(s):return set(re.sub("[ ,.;:-]+","",s.lower()))

def make_qs():
    cnt=read_counters()
    letters=[]
    for g in GROUPS:
        pool=[a for a in ALGS_LET if cnt.get((g,a),0)<TARGET_SHOWS]
        if pool:
            a=random.choice(pool)
            letters.append({"group":g,"alg":a,"img":url(g,a),"qtype":"letters",
                            "prompt":"–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –±—É–∫–≤—ã, —Ç–æ —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ.",
                            "correct":LETTER[g]})
    corners=[{"group":g,"alg":a,"img":url(g,a),"qtype":"corners",
              "prompt":"–°—á–∏—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª –∏ –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –æ—Ç—Ç–µ–Ω–∫–∞?",
              "correct":CORNER[g]}
              for g,a in itertools.product(GROUPS,ALGS_COR)
              if cnt.get((g,a),0)<TARGET_SHOWS]
    seq=letters+corners
    random.shuffle(seq)
    for i,q in enumerate(seq,1): q["‚Ññ"]=i
    return seq

def render_timer(sec,tid):
    if tid in st.session_state["_timer_flags"]: return
    components.html(f"""
    <div style="font-size:1.2rem;font-weight:bold;color:#111;margin:10px 0;">
      –û—Å—Ç–∞–ª–æ—Å—å&nbsp;–≤—Ä–µ–º–µ–Ω–∏: <span id="t{tid}">{sec}</span>&nbsp;—Å–µ–∫
    </div>
    <script>
      let t{tid}={sec};const s{tid}=document.getElementById('t{tid}');
      const i{tid}=setInterval(()=>{{if(--t{tid}<0){{clearInterval(i{tid});return;}}
      if(s{tid})s{tid}.innerText=t{tid};}},1000);
    </script>""",height=60)
    st.session_state["_timer_flags"][tid]=True

def finish(ans):
    q=st.session_state.questions[st.session_state.idx]
    ms=int((time.time()-st.session_state.phase_start_time)*1000)
    ok=clean(ans)==clean(q["correct"]) if q["qtype"]=="letters" else ans.lower()==q["correct"].lower()
    log_q.put([datetime.datetime.utcnow().isoformat(),st.session_state.name,q["‚Ññ"],
               q["group"],q["alg"],q["qtype"],q["prompt"],ans,q["correct"],ms,ok,
               st.session_state.session_id])
    bump_counter(q["group"],q["alg"])
    st.session_state.update(idx=st.session_state.idx+1,phase="intro",
                            phase_start_time=None,_timer_flags={})
    st.experimental_rerun()

if not st.session_state.questions:
    st.session_state.questions=make_qs()

if st.session_state.pause_until>time.time():
    st_autorefresh(interval=600,key="pause"); st.stop()

if st.session_state.idx>=len(st.session_state.questions):
    st.markdown("<div style='margin-top:50px;padding:40px;text-align:center;font-size:2rem;color:#fff;background:#262626;border-radius:12px;'>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ.<br><b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!</b></div>", unsafe_allow_html=True)
    st.balloons(); st.stop()

if not st.session_state.name:
    st.markdown("""<div style="color:#111;">
    <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.</h2>
    <p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º¬ª.</p>
    </div>""", unsafe_allow_html=True)
    nick=st.text_input("",placeholder="–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º",key="nick",label_visibility="collapsed")
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º"):
        st.session_state.name=f"–£—á–∞—Å—Ç–Ω–∏–∫_{secrets.randbelow(900000)+100000}"; st.experimental_rerun()
    if nick: st.session_state.name=nick.strip(); st.experimental_rerun()
    st.stop()

q=st.session_state.questions[st.session_state.idx]

if st.session_state.phase=="intro":
    txt_c="""–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –¥–∏–∞–º–µ—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —É–≥–ª—ã,
<b>–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π</b>, –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ–∫—Ä–∞—à–µ–Ω—ã –ª–∏ –æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ <b>—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –æ—Ç—Ç–µ–Ω–∫–∞</b>.<br><br>
–ö–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ <b>15&nbsp;—Å–µ–∫—É–Ω–¥</b>. –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ."""
    txt_l="""–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ
<b>–±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</b>.<br><br>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
–ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏ —Ç.&nbsp;–¥., –∞ —Ç–∞–∫–∂–µ —Å–ª–∏—Ç–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.<br><br>–ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö –±—É–∫–≤ –Ω–µ—Ç ‚Äî —Ç–æ–≥–¥–∞
–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ù–µ –≤–∏–∂—É –±—É–∫–≤¬ª</b>."""
    st.markdown(txt_c if q["qtype"]=="corners" else txt_l,unsafe_allow_html=True)
    if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É"):
        st.session_state.update(phase="question",phase_start_time=time.time()); st.experimental_rerun()
    st.stop()

remaining=TIME_LIMIT-(time.time()-st.session_state.phase_start_time)
if remaining<0: remaining=0
st.markdown(f"### –í–æ–ø—Ä–æ—Å ‚Ññ{q['‚Ññ']} –∏–∑ {len(st.session_state.questions)}")
render_timer(int(remaining), str(st.session_state.idx))

placeholder=st.empty()
if remaining>0:
    placeholder.image(q["img"],width=300)
else:
    placeholder.markdown("<div style='color:#666;font-style:italic;padding:40px 0;text-align:center;'>–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.</div>",unsafe_allow_html=True)

st.markdown("---")

if q["qtype"]=="corners":
    sel=st.radio("",["–î–∞, —É–≥–ª—ã –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.","–ù–µ—Ç, —É–≥–ª—ã –æ–∫—Ä–∞—à–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞.","–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å."],
                 index=None,key=f"r{st.session_state.idx}")
    if sel: finish("–¥–∞" if sel.startswith("–î–∞") else "–Ω–µ—Ç" if sel.startswith("–ù–µ—Ç") else "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å")
else:
    answer=st.text_input(q["prompt"],key=f"t{st.session_state.idx}",placeholder="–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—ã –∏ Enter")
    col,_=st.columns([1,3])
    with col:
        btn_disabled=bool(re.search(r"[–ê-–Ø–∞-—è–Å—ë]",answer))
        if st.button("–ù–µ –≤–∏–∂—É –±—É–∫–≤",disabled=btn_disabled): finish("–ù–µ –≤–∏–∂—É")
    if answer and re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë ,.;:-]+",answer): finish(answer.strip())


